import { ApiPromise } from '@polkadot/api';
import { AccountId } from '@polkadot/types/interfaces/runtime';
import { PayIdList, ConditionalPay, Condition, OpenChannelRequestOf } from 'celer-substrate-types';
import { KeyringPair } from '@polkadot/keyring/types';
export declare function selectChannelPeerKeyring(_channelPeer: string): Promise<KeyringPair>;
export declare function selectChannelPeer(api: ApiPromise, _channelPeer: string): Promise<AccountId>;
export declare function caluculateChannelId(api: ApiPromise, openRequest: OpenChannelRequestOf): Promise<string>;
export declare function getOpenChannelRequest(api: ApiPromise, balanceLimitsEnabled: boolean, balanceLimits: number, channelPeerBalance0: number, channelPeerBalance1: number, openDeadline: number, disputeTimeout: number, zeroTotalDeposit: boolean, msgValueReceiver: number): Promise<OpenChannelRequestOf>;
export declare function getCooperativeWithdrawRequest(api: ApiPromise, channelId: string, seqNum: number, amount: number, _receiverAccount: string, withdrawDeadline: number, isZeroHash: boolean, recipientChannelId?: string): Promise<any>;
export declare function getSignedSimplexStateArray(api: ApiPromise, channelIds: string[], seqNums: number[] | undefined, transferAmounts: number[] | undefined, lastPayResolveDeadlines: number[] | undefined, payIdLists: PayIdList[] | undefined, totalPendingAmounts?: number[], signers?: string | undefined): Promise<any>;
export declare function getCooperativeSettleRequest(api: ApiPromise, channelId: string, seqNum: number, settleAmounts: number[], settleDeadline?: number): Promise<any>;
export declare function getResolvePayByCondtionsRequest(api: ApiPromise, condPay: ConditionalPay, hashPreimages?: string[]): Promise<any>;
export declare function getVouchedCondPayResult(api: ApiPromise, condPay: ConditionalPay, amount: number): Promise<any>;
export declare function getPayIdListInfo(api: ApiPromise, payAmounts: number[][], payConditions?: null): Promise<any>;
export declare function getCoSignedIntendSettle(api: ApiPromise, channelIds: string[], payAmountsArray: number[][][], seqNums: number[], lastPayResolverDeadlines: number[], trasnferAmounts: number[]): Promise<any>;
export declare function getConditions(api: ApiPromise, type: number): Promise<any>;
export declare function getCondition(api: ApiPromise, type: number): Promise<Condition>;
export declare function getConditionalPay(api: ApiPromise, conditions: Condition[], maxAmount: number, payTimestamp?: number, resolveDeadline?: number, resolveTimeout?: number, logicType?: number): Promise<ConditionalPay>;
export declare function getChannelPeers(api: ApiPromise): Promise<AccountId[]>;
export declare function encodeCondPay(condPay: ConditionalPay): Promise<Uint8Array>;
export declare function waitBlockNumber(block: number): Promise<unknown>;
