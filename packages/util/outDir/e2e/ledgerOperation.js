"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const connect_1 = require("../src/connect");
const funcs_1 = require("../src/funcs");
const utils_1 = require("../src/utils");
const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';
const BOB = '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty';
async function main() {
    const api = await connect_1.connect();
    console.log("====================== intend withdraw and confirm withdraw =========================");
    await funcs_1.depositPool(api, 'alice', 'alice', 20000);
    await utils_1.waitBlockNumber(2);
    await funcs_1.approve(api, 'alice', 'celerLedgerId', 20000);
    await utils_1.waitBlockNumber(2);
    const channelId1 = await funcs_1.openChannel(api, 'bob', false, 1000);
    await utils_1.waitBlockNumber(2);
    await funcs_1.deposit(api, 'alice', channelId1, 'bob', 2000, 0);
    await utils_1.waitBlockNumber(2);
    await funcs_1.intendWithdraw(api, 'bob', channelId1, 1000);
    await utils_1.waitBlockNumber(2);
    await funcs_1.emitWithdrawIntent(api, channelId1);
    await utils_1.waitBlockNumber(10);
    await funcs_1.confirmWithdraw(api, 'bob', channelId1);
    await utils_1.waitBlockNumber(2);
    await funcs_1.emitWalletInfo(api, channelId1);
    await funcs_1.emitPeersMigrationInfo(api, channelId1);
    await utils_1.waitBlockNumber(3);
    console.log("\n", "========================= intend withdraw and veto withdraw ============================");
    await funcs_1.intendWithdraw(api, 'alice', channelId1, 1000);
    await utils_1.waitBlockNumber(2);
    await funcs_1.emitWithdrawIntent(api, channelId1);
    await funcs_1.vetoWithdraw(api, 'bob', channelId1);
    await utils_1.waitBlockNumber(2);
    await funcs_1.emitPeersMigrationInfo(api, channelId1);
    await utils_1.waitBlockNumber(3);
    console.log("\n", "=============================== cooperative withdraw ====================================");
    await funcs_1.cooperativeWithdraw(api, 'alice', channelId1, 1, 1000, 'alice');
    await utils_1.waitBlockNumber(2);
    await funcs_1.emitPeersMigrationInfo(api, channelId1);
    await funcs_1.emitWalletInfo(api, channelId1);
    await utils_1.waitBlockNumber(3);
    console.log("\n", "================================ cooperative settle ======================================");
    const cooperativeSettleRequest = await utils_1.getCooperativeSettleRequest(api, channelId1, 1, [0, 3000]);
    await funcs_1.cooperativeSettle(api, 'alice', cooperativeSettleRequest);
    await utils_1.waitBlockNumber(2);
    await funcs_1.emitWalletInfo(api, channelId1);
    await funcs_1.emitChannelInfo(api, channelId1);
    await utils_1.waitBlockNumber(3);
    console.log("\n", "=============== intend withdraw and confirm withdraw to another channel ==================");
    const channelId2 = await funcs_1.openChannel(api, 'bob', false, 1000, true, 100000);
    await utils_1.waitBlockNumber(2);
    const channelId3 = await funcs_1.openChannel(api, 'alice', true, 0, true, 100001);
    await utils_1.waitBlockNumber(2);
    await funcs_1.intendWithdraw(api, 'bob', channelId2, 1000, false, channelId3);
    await utils_1.waitBlockNumber(3);
    await funcs_1.emitWithdrawIntent(api, channelId2);
    await utils_1.waitBlockNumber(7);
    await funcs_1.confirmWithdraw(api, 'alice', channelId2);
    await utils_1.waitBlockNumber(2);
    await funcs_1.emitBalanceMap(api, channelId3);
    await funcs_1.emitBalanceMap(api, channelId2);
    await funcs_1.emitWalletInfo(api, channelId3);
    await funcs_1.emitWalletInfo(api, channelId2);
    console.log("\n", "======================== cooperative withdraw to another channel ============================");
    await funcs_1.cooperativeWithdraw(api, 'bob', channelId2, 1, 1000, 'bob', 999999, false, channelId3);
    await utils_1.waitBlockNumber(3);
    await funcs_1.emitBalanceMap(api, channelId3);
    await funcs_1.emitBalanceMap(api, channelId2);
    await funcs_1.emitWalletInfo(api, channelId2);
    await funcs_1.emitWalletInfo(api, channelId3);
    console.log("\n", "============================== Resolve Payment By Conditions ==========================================");
    const channelId4 = await funcs_1.openChannel(api, 'alice', true);
    await utils_1.waitBlockNumber(2);
    await funcs_1.deposit(api, 'alice', channelId4, 'alice', 2000, 0);
    await utils_1.waitBlockNumber(2);
    await funcs_1.deposit(api, 'bob', channelId4, 'bob', 1000, 0);
    await utils_1.waitBlockNumber(2);
    const globalResult = await utils_1.getCoSignedIntendSettle(api, [channelId4, channelId4], [[[10, 20], [30, 40]], [[50, 60], [70, 80]]], [1, 1], [999999, 999999], [100, 200]);
    const signedSimplexStateArray1 = globalResult.signedSimplexStateArray;
    for (let peerIndex = 0; peerIndex < 2; peerIndex++) {
        for (let listIndex = 0; listIndex < globalResult.condPays[peerIndex].length; listIndex++) {
            for (let payIndex = 0; payIndex < globalResult.condPays[peerIndex][listIndex].length; payIndex++) {
                let payRequest = await utils_1.getResolvePayByCondtionsRequest(api, globalResult.condPays[peerIndex][listIndex][payIndex]);
                await funcs_1.resolvePaymentByConditions(api, 'alice', payRequest);
                await utils_1.waitBlockNumber(2);
            }
        }
    }
    await utils_1.waitBlockNumber(5);
    console.log("\n", "=================================== Intend Settle ============================================");
    await funcs_1.intendSettle(api, 'alice', signedSimplexStateArray1);
    await utils_1.waitBlockNumber(3);
    await funcs_1.emitPeersMigrationInfo(api, channelId4);
    await funcs_1.emitLastPayResolveDeadlineMap(api, channelId4);
    console.log("\n", "==================================== Clear Pays ================================================");
    await funcs_1.clearPays(api, 'bob', channelId4, 'bob', globalResult.payIdListArrays[0][1]);
    await utils_1.waitBlockNumber(2);
    await funcs_1.clearPays(api, 'alice', channelId4, 'alice', globalResult.payIdListArrays[1][1]);
    await utils_1.waitBlockNumber(2);
    await funcs_1.emitChannelInfo(api, channelId4);
    await funcs_1.emitPeersMigrationInfo(api, channelId4);
    await utils_1.waitBlockNumber(3);
    console.log("========================== Confirm Settle ============================");
    await funcs_1.emitSettleFinalizedTime(api, channelId4);
    await funcs_1.confirmSettle(api, 'alice', channelId4);
    await utils_1.waitBlockNumber(3);
    await funcs_1.emitChannelInfo(api, channelId4);
    await utils_1.waitBlockNumber(3);
    console.log("\n", "========== Intend Settle with 0 payments (null state) ============");
    const channelId5 = await funcs_1.openChannel(api, 'bob', false, 1000, true, 100004);
    await utils_1.waitBlockNumber(2);
    let singleSignedNullState = await utils_1.getSignedSimplexStateArray(api, [channelId5], [0], undefined, undefined, undefined, [0], 'bob');
    await funcs_1.intendSettle(api, 'bob', singleSignedNullState);
    await utils_1.waitBlockNumber(3);
    await funcs_1.emitPeersMigrationInfo(api, channelId5);
    await utils_1.waitBlockNumber(3);
    console.log("\n", "====== Snapshot States, Intend Withdraw and Confirm Withdraw =====");
    const channelId6 = await funcs_1.openChannel(api, 'bob', false, 1000, true, 1000002);
    await utils_1.waitBlockNumber(2);
    const payIdListInfo = await utils_1.getPayIdListInfo(api, [[11, 22]]);
    let signedSimplexStateArray2 = await utils_1.getSignedSimplexStateArray(api, [channelId6], [5], [100], [999999], [payIdListInfo.payIdLists[0]], [payIdListInfo.totalPendingAmount]);
    await funcs_1.snapshotStates(api, 'alice', signedSimplexStateArray2);
    await utils_1.waitBlockNumber(2);
    await funcs_1.emitChannelInfo(api, channelId6);
    await funcs_1.intendWithdraw(api, 'alice', channelId6, 1000, true);
    await utils_1.waitBlockNumber(10);
    await funcs_1.confirmWithdraw(api, 'alice', channelId6);
    await utils_1.waitBlockNumber(2);
    await funcs_1.emitPeersMigrationInfo(api, channelId6);
    await utils_1.waitBlockNumber(2);
    console.log("\n", "=============== Intend Settle with a same seqNum as snapshot =======================");
    for (let i = 0; i < 2; i++) {
        let payRequest = await utils_1.getResolvePayByCondtionsRequest(api, payIdListInfo.condPayArray[0][i]);
        await funcs_1.resolvePaymentByConditions(api, 'alice', payRequest);
        await utils_1.waitBlockNumber(2);
    }
    await utils_1.waitBlockNumber(6);
    await funcs_1.intendSettle(api, 'alice', signedSimplexStateArray2);
    await utils_1.waitBlockNumber(3);
    await funcs_1.emitChannelInfo(api, channelId6);
    await funcs_1.emitPeersMigrationInfo(api, channelId6);
    await utils_1.waitBlockNumber(3);
    process.exit(0);
}
main();
