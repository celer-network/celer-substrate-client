"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const connect_1 = require("../src/connect");
const funcs_1 = require("../src/funcs");
const utils_1 = require("../src/utils");
const util_crypto_1 = require("@polkadot/util-crypto");
const util_1 = require("@polkadot/util");
async function main() {
    const api = await connect_1.connect();
    console.log("=== Resolve Payment By Conditions when the logic is BOOLEAN_AND and all conditions are true ===");
    let conditions = await utils_1.getConditions(api, 3);
    let condPay = await utils_1.getConditionalPay(api, conditions, 10, Date.now(), 999999, 10, 0);
    let truePreimgage = util_1.u8aToHex(util_crypto_1.blake2AsU8a(api.registry.createType("u64", 1).toU8a()));
    let payRequest = await utils_1.getResolvePayByCondtionsRequest(api, condPay, [truePreimgage]);
    await funcs_1.resolvePaymentByConditions(api, 'alice', payRequest);
    await utils_1.waitBlockNumber(2);
    console.log("\n", "=== Resolve Payment By Conditions when the logic is BOOLEAN_AND and some conditions are false ====");
    conditions = await utils_1.getConditions(api, 1);
    condPay = await utils_1.getConditionalPay(api, conditions, 20, Date.now(), 999999, 10, 0);
    payRequest = await utils_1.getResolvePayByCondtionsRequest(api, condPay, [truePreimgage]);
    await funcs_1.resolvePaymentByConditions(api, 'alice', payRequest);
    await utils_1.waitBlockNumber(2);
    console.log("\n", "=== Resolve Payment By Conditions when the logic is BOOLEAN_OR and some conditions are true ===");
    conditions = await utils_1.getConditions(api, 2);
    condPay = await utils_1.getConditionalPay(api, conditions, 30, Date.now(), 999999, 10, 1);
    payRequest = await utils_1.getResolvePayByCondtionsRequest(api, condPay, [truePreimgage]);
    await funcs_1.resolvePaymentByConditions(api, 'alice', payRequest);
    await utils_1.waitBlockNumber(2);
    console.log("\n", "=== Resolve Payment By Conditions when the logic is BOOLEAN_OR and all conditions are false ===");
    conditions = await utils_1.getConditions(api, 0);
    condPay = await utils_1.getConditionalPay(api, conditions, 30, Date.now(), 999999, 10, 1);
    payRequest = await utils_1.getResolvePayByCondtionsRequest(api, condPay, [truePreimgage]);
    await funcs_1.resolvePaymentByConditions(api, 'alice', payRequest);
    await utils_1.waitBlockNumber(2);
    console.log("\n", "=============== Resolve Payment By Vouched Result ========================");
    conditions = await utils_1.getConditions(api, 5);
    let sharedPay = await utils_1.getConditionalPay(api, conditions, 100, 0, 999999, 10, 3);
    let vouchedPayResult = await utils_1.getVouchedCondPayResult(api, sharedPay, 20);
    await funcs_1.resolvePaymentByVouchedResult(api, 'alice', vouchedPayResult);
    await utils_1.waitBlockNumber(2);
    console.log("\n", "====== Resolve Payment By Vouched Result when the new result is larger ===================");
    vouchedPayResult = await utils_1.getVouchedCondPayResult(api, sharedPay, 25);
    await funcs_1.resolvePaymentByVouchedResult(api, 'alice', vouchedPayResult);
    await utils_1.waitBlockNumber(2);
    console.log("\n", "=== Resolve Payment By Conditions when the logic is NUMERIC_ADD  =======");
    conditions = await utils_1.getConditions(api, 5);
    condPay = await utils_1.getConditionalPay(api, conditions, 50, Date.now(), 999999, 10, 3);
    payRequest = await utils_1.getResolvePayByCondtionsRequest(api, condPay, [truePreimgage]);
    await funcs_1.resolvePaymentByConditions(api, 'alice', payRequest);
    await utils_1.waitBlockNumber(2);
    console.log("\n", "=== Resolve Payment By Conditions when the logic is NUMERIC_MAX  =======");
    conditions = await utils_1.getConditions(api, 5);
    condPay = await utils_1.getConditionalPay(api, conditions, 30, Date.now(), 999999, 10, 4);
    payRequest = await utils_1.getResolvePayByCondtionsRequest(api, condPay, [truePreimgage]);
    await funcs_1.resolvePaymentByConditions(api, 'alice', payRequest);
    await utils_1.waitBlockNumber(2);
    console.log("\n", "=== Resolve Payment By Conditions when the logic is NUMERIC_MIN  =======");
    conditions = await utils_1.getConditions(api, 5);
    condPay = await utils_1.getConditionalPay(api, conditions, 30, Date.now(), 999999, 10, 5);
    payRequest = await utils_1.getResolvePayByCondtionsRequest(api, condPay, [truePreimgage]);
    await funcs_1.resolvePaymentByConditions(api, 'alice', payRequest);
    await utils_1.waitBlockNumber(2);
    console.log("\n", "=== ResolvePayment By Condition without conditions ===");
    conditions = await utils_1.getConditions(api, 6);
    condPay = await utils_1.getConditionalPay(api, conditions, 50, Date.now(), 999999, 10, 0);
    payRequest = await utils_1.getResolvePayByCondtionsRequest(api, condPay, [truePreimgage]);
    await funcs_1.resolvePaymentByConditions(api, 'alice', payRequest);
    await utils_1.waitBlockNumber(2);
    process.exit(0);
}
main();
